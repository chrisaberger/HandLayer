#include "catch/catch.hpp"
#include "tensor.h"
#include "lstm.h"
#include <limits>

TEST_CASE("Testing lstm", "[float_lstm]") {
  const size_t embedding_dim = 10;
  const size_t hidden_dim = 6;
  const size_t batch_size = 5;
  const size_t num_layers = 1;
  LSTM<float> lstm =
      LSTM<float>(embedding_dim, hidden_dim, batch_size, num_layers);
  lstm.set_weights(Tensor<float>::from_npy("../test/data/weight_ih_l0.npy"),
                   Tensor<float>::from_npy("../test/data/weight_hh_l0.npy"),
                   Tensor<float>::from_npy("../test/data/bias_ih_l0.npy"),
                   Tensor<float>::from_npy("../test/data/bias_hh_l0.npy"));

  Tensor<float> dec = Tensor<float>::from_vec(
      {1.6734272241592407,   0.010342830792069435, -0.70395666360855103,
       -0.18526579439640045, -0.34157752990722656, -0.30025827884674072,
       1.3075355291366577,   -1.1627987623214722,  0.11963611096143723,
       -0.1631353348493576,  -0.77731430530548096, -0.25145524740219116,
       -0.22227048873901367, 1.6871134042739868,   0.22842517495155334,
       0.46763551235198975,  -0.69697242975234985, -1.1607614755630493,
       0.69954240322113037,  0.19908162951469421,  0.66144531965255737,
       1.1899205446243286,   1.4301451444625854,   0.42077338695526123,
       -0.35380652546882629, 0.76392704248428345,  -0.58895069360733032,
       -0.76359736919403076, 1.3352056741714478,   0.60427361726760864,
       0.8656923770904541,   0.24440392851829529,  -0.66291135549545288,
       0.80730825662612915,  1.1016806364059448,   -0.17593604326248169,
       -2.2455577850341797,  -1.4464579820632935,  0.061155281960964203,
       -0.61774450540542603, 0.066280260682106018, -0.43704012036323547,
       0.7626006007194519,   0.44151091575622559,  1.1651384830474854,
       2.0153918266296387,   0.13741245865821838,  0.93864470720291138,
       -0.18600109219551086, -0.64463931322097778},
      {batch_size, embedding_dim});

  Tensor<float> h({batch_size, hidden_dim});
  Tensor<float> c({batch_size, hidden_dim});
  h.zero();
  c.zero();

  auto h_c = lstm.forward(dec, h, c);

  Tensor<float> h_t = Tensor<float>::from_vec(
      {
          0.024514690041542053,  -0.16978850960731506,  -0.052973240613937378,
          -0.11851642280817032,  -0.070385850965976715, -0.039756070822477341,
          -0.023068031296133995, -0.075698599219322205, 0.21819275617599487,
          -0.081390604376792908, -0.21726676821708679,  -0.076678812503814697,
          0.064265936613082886,  -0.010811485350131989, -0.30380198359489441,
          -0.032774690538644791, -0.088030479848384857, -0.158418208360672,
          -0.15570321679115295,  -0.11451181024312973,  0.0054684164933860302,
          0.047292158007621765,  -0.1657407283782959,   -0.087142571806907654,
          -0.22385551035404205,  -0.047219909727573395, 0.048143111169338226,
          0.074343286454677582,  0.26692992448806763,   0.028252197429537773
      },
      {batch_size, hidden_dim});

  Tensor<float> c_t = Tensor<float>::from_vec(
      {0.048416908830404282,  -0.30816781520843506,  -0.23941385746002197,
       -0.32189610600471497,  -0.11457274854183197,  -0.14098131656646729,
       -0.041924290359020233, -0.1750759482383728,   0.31040066480636597,
       -0.14094461500644684,  -0.41648516058921814,  -0.14794081449508667,
       0.13594426214694977,   -0.033065460622310638, -0.52706301212310791,
       -0.049077674746513367, -0.24753555655479431,  -0.411702960729599,
       -0.3872300386428833,   -0.25617879629135132,  0.0075163515284657478,
       0.09042946994304657,   -0.38537994027137756,  -0.17164450883865356,
       -0.450328528881073,    -0.12969188392162323,  0.13263438642024994,
       0.1799110472202301,    0.57767164707183838,   0.055319409817457199},
      {batch_size, hidden_dim});

  for(size_t i = 0; i < batch_size; ++i){
    for(size_t j = 0; j < hidden_dim; ++j){
      REQUIRE(std::get<0>(h_c)(i, j) == h_t(i, j));
      REQUIRE(std::get<1>(h_c)(i, j) == c_t(i, j));
    }
  }





}
